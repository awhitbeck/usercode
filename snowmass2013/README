#########
# test git instructions
#########

git init myWorkingArea
cd myWorkingArea
git remote add origin https://github.com/awhitbeck/usercode
git config core.sparsecheckout true
echo snowmass2013/ >> .git/info/sparse-checkout
git pull origin master

######## 
# commit changes to remote repository
########

git commit foo.txt
git push origin

########
# setup
########

cvs co -d ZZMatrixElement/snowmass2013 UserCode/Whitbeck/snowmass2013
cd ZZMatrixElement/snowmass2013

#For multidimensional fit####################
#JHU
source /home/ntran/ROOTdistributions/myROOT528_fromSource/root/bin/thisroot.csh
#lxplus
source /afs/cern.ch/sw/lcg/app/releases/ROOT/5.28.00/slc4_amd64_gcc34/root/bin/thisroot.sh

cd test 
root -l -n loadLib.C
Playground test(126.) 
test.loadTree("root://eoscms.cern.ch//eos/cms/store/cmst3/user/mmozer/Higgs/Prophecy/root/prophecy_inputemu_126_unweighted.root","newTree")
test.fitData()      

#For KD fit (using tcsh shell)#############################
source /afs/cern.ch/user/s/sbologne/public/setROOT.csh

root -l -n
#for gen-level signal only 1D KD fits, arguments: nEvts per toy, number of toys, model
.x  embeddedToys_1DKD.C(50, 100, kScalar_fa3p0)

#for signal + bkg with detector effects 1D KD fits, arguments: 
#nEvts of signal per toy, number of toys, model, bool to switch on bakcground,
#bool to float S/B (should be false unless you know what you are doing)
#counter of the first event in toy (to parallelize toys generation)
.x  embeddedToys_1DKD.C(50, 100, kScalar_fa3p0, true, false, 0)

#for signal + bkg with detector effects 2D KDvsMZZ fits with sig and bkg floating, arguments: 
#nEvts of signal per toy, number of toys, model, 
#nEvts of bakcground per toy,
#counter of the first event in toy (to parallelize toys generation)
.x  embeddedToys_extended.C(50, 100, kScalar_fa3p0, 5 0)


=========================

#submitting jobs to hhpc batch system by hand- - - 
#from the test directory

#pureToys -> true=pure toys, false=embedded toys
#ntoysperjob -> number of toys to run
#seed_index -> controls random numbers (and output file name)

qsub submitPBSJobTemplate.pbs -v "pureToys=false,ntoysperjob=1000,seed_index=2"

#jobs can also be submitted with no arguments.  By default the 
#job will run 1000 embedded toysA

#submitting jobs to hhpc batch system by hand- - - 
# see submitToys help documentation
python submitToys.py -h 

#submitting jobs for 1D KD fit to LSF queues on lxplus
chmod +x submitLSFJob_1DKDToys.lsf
bsub -q 8nh submitLSFJob_1DKDToys.lsf

#==============================

#Running embedded toys can be done using 
# embeddedToys.C by simply modifying the
# root files that is loaded.  It takes the
# number of toys to run and the number of
# events per toys as parameters, e.g.:

# run 100 toys with 21 evts/toy using embedded
# toys which are saved to embeddedToys_test.root
root -l -n loadLib.C "embeddedToys.C(21,100,false,\"embeddedToys_test.root\")"

# run 100 toys with 21 evts/toy using pure
# toys which are saved to pureToys_test.root
root -l -n loadLib.C "embeddedToys.C(21,100,true,\"pureToys_test.root\")"

# embedded toys take 1-2 seconds each and don't 
# seem to crash even over 1000 trials. Pure 
# toys seem to take ~7 seconds for 21 events.
